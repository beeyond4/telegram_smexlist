from aiogram import Dispatcher, Bot, types, executor
from aiogram.types import ParseMode
from aiogram.utils.markdown import text, bold, italic, code, pre

from random import choices, shuffle

from asyncio import sleep

from init_db import *
from config import TOKEN
from cipher import *
import keyboards as kb

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
global slots
slots = 4

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply('–ü—Ä–∏–≤–µ—Ç! üëã\n'
                        '–î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –≤ –°–º–µ—Ö–ª—ã—Å—Ç!', reply_markup=kb.greet_kb)


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    msg = text(bold('–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:'),
               '/loadquestion', '/questions', '/remove', sep='\n')
    await message.reply(msg, parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(commands=['loadquestion'])
async def process_loadquest_command(message: types.Message):
    try:
        member = await bot.get_chat_member(message.chat.id, message.from_user.id)
        mtext = message.text.partition(' ')[2]
        load_db('questions', {'author' : member["user"]["username"],
                              'question' : mtext
                             })
        await message.reply(mtext + '\n–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω!')
    except:
        await message.reply('–û—à–∏–±–∫–∞!\n'
                            '–í–æ–ø—Ä–æ—Å –Ω–µ –∑–∞–ø–∏—Å–∞–Ω, '
                            '–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.')


@dp.message_handler(commands=['questions'])
async def process_questview_command(message: types.Message):
    try:
        quests = get_table('questions')
        await message.reply(str(quests))
    except:
        await message.reply('–û—à–∏–±–∫–∞!\n'
                            '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤.')


@dp.message_handler(commands=['remove'])
async def process_removequest_command(message: types.Message):
    try:
        mtext = message.text.partition(' ')[2]
        remove(mtext, 'questions')
        await message.reply('–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!')
    except:
        await message.reply('–û—à–∏–±–∫–∞!\n'
                            '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å, '
                            '–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.')


@dp.message_handler(commands=['create'])
async def process_questview_command(message: types.Message):
    try:
        member = await bot.get_chat_member(message.chat.id, message.from_user.id)
        key = get_key(16)

        load_db('player', {'key' : key,
                           'id' : member["user"]["id"],
                           'nickname' : member["user"]["username"]
                          })
        msg = text(bold('–ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞,'),
                   text('–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:', code(str(key))), sep='\n')
        await message.reply(msg, parse_mode=ParseMode.MARKDOWN)
    except:
        await message.reply('–û—à–∏–±–∫–∞!\n'
                            '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É.')

# –î–µ–ª–∏–º –Ω–∞—Ü–µ–ª–æ –∫–æ–ª-–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ 2, –Ω–∞—Ö–æ–¥–∏–º –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è
# –ï—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ 0, —Å–æ–∑–∞—ë–º —Å—Ç—Ä–æ–∫—É –≤ answers —Å –¥–≤—É–º—è –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
# –ï—Å–ª–∏ 1, —Ç–æ —Å–∫–∏–ø

# –¶–µ–ª–∞—è —á–∞—Å—Ç—å –æ—Ç –¥–µ–ª–µ–Ω–∏—è - —ç—Ç–æ quest_number
@dp.message_handler(commands=['connect'])
async def process_questview_command(message: types.Message):
    try:
        member = await bot.get_chat_member(message.chat.id, message.from_user.id)
        mtext = message.text.partition(' ')[2]
        room = get_table('player', ['key', mtext])

        if member["user"]["username"] in [p[2] for p in room]:
            await message.reply("–í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —ç—Ç–æ–π –∏–≥—Ä–µ")
            return
        try:
            player_id = get_table('player', ['id', member["user"]["id"]])[0][1]
            if player_id is not None:
                await message.reply("–í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –∫–æ–º–Ω–∞—Ç–µ")
                return
        except:

            load_db('player', {'key' : mtext,
                           'id' : member["user"]["id"],
                           'nickname' : member["user"]["username"]
                          })

            msg = text('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ',
                   '–î—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏:',
                   ", ".join([p[2] for p in room]), sep='\n')
            await message.reply(msg)
            # slots - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ (–≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—É–¥–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º)
            room = get_table('player', ['key', mtext])
            if len(room) == slots:
                questions = get_table('questions')

                for _ in range(slots // 2):
                    full_quests = choices(list(questions), k = slots // 2)

                ranger = list(full_quests)
                for q in ranger:
                    full_quests.append(q)
                shuffle(full_quests)
                for i in range(len(room)):
                    msg = text(bold("–ü—Ä–æ–¥–æ–ª–∂–∏ —Ñ—Ä–∞–∑—É:"), full_quests[i][2], sep='\n')
                    await bot.send_message(room[i][1] , msg, parse_mode=ParseMode.MARKDOWN)
                    edit_db('player', {'quest_id' : full_quests[i][0]}, str(room[i][1]))

        # ‚úì –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –Ω–∞–±—Ä–∞–ª–∏—Å—å (–≤ —Ç–∞–±–ª player
        # –±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø–µ—Ä–≤—ã–µ 3 –∫–æ–ª–æ–Ω–∫–∏),
        # ‚úì –ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –≤ —Ç–∞–±–ª rooms 2 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ (n/2)
        # ‚úì –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—É—á–∞—Ç 2 —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞, –≤—Ç–æ—Ä–æ–π - –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        # ‚úì –ù–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–Ω–µ—Å—É—Ç—Å—è –≤ —Ç–∞–±–ª player
        # ‚úì –°—Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∞ —Å –ø—Ä–æ—Å—å–±–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ñ—Ä–∞–∑—É
        # ‚úì –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ
        # –≤ —Ç–∞–±–ª –∫–∞–∫ answer

    except:
        await message.reply('–û—à–∏–±–∫–∞!\n'
                            '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ.')


# –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å, –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ç–∞–±–ª–∏—Ü—ã answers
@dp.message_handler(commands=['play'])
async def process_startgame_command(message: types.Message):
    try:
        key = message.text.partition(' ')[2]
        stats = get_table('player', ['key', key])

        if len(stats) < slots:
            await message.reply('–í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤')
            return

        players = [p[2] for p in stats]
        quests = [p[3] for p in stats]
        # Check answers and group by questions
        answers = {}
        for player in stats:
            if player[4] is None:
                await message.reply('–ù–µ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –æ—Ç–≤–µ—Ç—ã!')
                return
            try:
                answers[player[3]].append([player[4], [player[1], player[2]]])
            except:
                answers[player[3]] = [ [player[4], [ player[1], player[2] ]] ]

        msg = text(text('–ü–æ–µ—Ö–∞–ª–∏','!',sep=''),
                    '–í –∏–≥—Ä–µ —É—á–∞—Å—Ç–≤—É—é—Ç:',
                    ", ".join(players), sep='\n')
        await bot.send_message(message.chat.id, msg)
        await sleep(5)

        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –∏–≥—Ä–æ–∫–æ–≤ —Ç–∞–∫, —á—Ç–æ–±—ã
        # –∫ 1 –≤–æ–ø—Ä–æ—Å—É —à–ª–æ 2 –æ—Ç–≤–µ—Ç–∞
        # ‚úì –í—ã–ø–æ–ª–Ω–∏–ª –≤—ã—à–µ –≤ —Ü–∏–∫–ª–µ


        for quest in answers:
            question = get_table('questions', ['id', str(quest)])[0][2]
            msg = text('–í–Ω–∏–º–∞–Ω–∏–µ, –≤–æ–ø—Ä–æ—Å:', question, sep='\n')

            inline_kb = kb.generate_buttons(answers[quest][0][0], answers[quest][1][0])
            await bot.send_message(message.chat.id, msg, reply_markup=inline_kb)
            await sleep(20)

        # Get winner stage (after all questions)
        stats = get_table('player', ['key', key])
        points = [int(0 if point[5] is None else point[5]) for point in stats]
        winner = stats[points.index(max(points))][2]
        msg = text('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!', '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:', winner, sep='\n')
        await bot.send_message(message.chat.id, msg)

        # Stage Clear <player> table
        # Deleting game session
        for player in stats:
            remove(str(player[1]), 'player')
    except:
        await message.reply('–û—à–∏–±–∫–∞!\n'
                            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É.')


@dp.callback_query_handler(lambda c: c.data == 'button1')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    print("–ù–∞–∂–∞—Ç–∞ 1 –∫–Ω–æ–ø–∫–∞")



@dp.callback_query_handler(lambda c: c.data == 'button2')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    print("–ù–∞–∂–∞—Ç–∞ 2 –∫–Ω–æ–ø–∫–∞")

# –ª–æ–≤–∏—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Ö –∫–∞–∫ –æ—Ç–≤–µ—Ç –∫ –∏–≥—Ä–µ
@dp.message_handler()
async def get_answer(message: types.Message):
    try:
        id = message.from_user.id
        answer = message.text
        edit_db('player', {'answer' : answer}, str(id))
    except:
        return


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
